;================================================================================================================================================================================================
;
;   ./commands/think/t
;
;   This function is used by players and admins to communicate with one another.
;
;   Syntax:
;   think (target)
;
;       Broadcasts a message to the performing participant's local area, unless a target is specified, in which case it attempts to isolate a message to the target using a contest against
;       Mental Projection, with failure resulting in overflow to the participant's local area.
;
;   Assumptions:     eax - Length of received data.
;                    esi - Pointer to descriptor associated with target socket.
;
;   Returns:         None.
;
;------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
;
;   Symbolic Cross-Referencing
;
;   buffer.1                            ./functions/b
;
;   command.think.arguments             ./command/think/t
;
;   command.think.l                     ./commands/think/d
;
;   command.think.untargetted           ./commands/think/t
;
;   connection.descriptor.index         ./functions/main.system.check/b
;
;   send.to.area                        ./functions/socket/communications/send.to.area/t
;
;   send.to.player                      ./functions/socket/communications/send.to.player/t
;
;   socket.data.command.think.help      ./commands/think/d
;
;   socket.data.command.think.help.l    ./commands/think/d
;
;   socket.data.send.buffer.l           ./functions/socket/recv.from.socket/d
;
;   socket.data.send.buffer.pointer     ./functions/socket/recv.from.socket/d
;
;   socket.data.send.socket.descriptor  ./functions/socket/recv.from.socket/d
;
;   socket.send                         ./functions/socket/socket.send/t
;

    command.think:              cmp   eax, command.think.l
                                jnz   command.think.arguments

    command.think.help.msg:     mov   ebx, dword [esi+connection.descriptor.index]                            ; ebx - Descriptor associated with current connection.
                                mov   dword [socket.data.send.socket.descriptor], ebx                         ; Store socket descriptor for send function.
                                mov   dword [socket.data.send.buffer.pointer], socket.data.command.think.help ; Point send function to message indicating that the command was bad.
                                mov   dword [socket.data.send.buffer.l], socket.data.command.think.help.l     ; Store length of message for send function.
                                call  socket.send                                                             ; Tell the user that the command doesn't have a current analogue.

                                ret                                                                           ; Return to caller.

    command.think.arguments:    mov   ebx, buffer.1                                                           ; ecx - Pointer to received command string.
                                add   ebx, command.think.l                                                    ; ecx - Pointer to first argument for command.

                                inc   ebx                                                                     ; ebx - Pointer to first byte of first argument.
                                cmp   byte [ebx], '"'                                                         ; Is the first byte a quotation mark?
                                jz    command.think.untargetted                                               ; Yes - send the message to the entire area.

                                ; Skill evaluation goes here - failure shunts to command.think.untargetted.
                                
                                mov   al, ' '                                                                 ; al - A space, which is what we're looking for to indicate that we've got the length of the provided name.
                                mov   ecx, 0FFFFh                                                             ; ecx - Counter for name length.
                                mov   edi, ebx                                                                ; edi - Pointer to given name.

                                repnz scasb                                                                   ; Find the length of the name, and put it in ecx.

                                mov   edx, edi                                                                ; edx - Pointer to given name.
                                sub   edx, ebx                                                                ; edx - Number of comparisons made by scasb.
                                dec   edx                                                                     ; edx - Length of given name.
                                mov   esi, ebx                                                                ; esi - Pointer to given name.
                                    
                                call  translate.name.to.socket.number                                         ; eax - Error, or pointer to socket associated with the given name.

                                cmp   eax, 0FFFFh
                                jz    command.think.help.msg

                                ; TODO - Populate fields for send.to.player. Still need to figure out areas.

                                call  send.to.player                                                          ; Send message to targetted player.

                                ret                                                                           ; Return to caller.

    command.think.untargetted:  mov   edx, eax                                                                ; edx - Length of command string minus terminator(s).
                                sub   edx, command.think.l                                                    ; edx - Length of command string minus terminator(s) and command.
                                call  send.to.area                                                            ; Broadcast the message.

                                ret                                                                           ; Return to caller.
