;================================================================================================================================================================================================
;
;   ./functions/get.text.data/t
;
;   This function returns a pointer to retrieved indexed data.
;
;   Assumptions:    Stack Frame: dword - Index to data to be retrieved.
;
;   Returns:        ecx - Pointer to retrieved data
;                   edx - Length of retrieved data.
;
;------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
;
;   Symbolic Cross-Referencing
;
;   close.descriptor    ./functions/close.descriptor/t
;
;   dword.l             ./b
;
;   get.text.data.nz    ./functions/get.text.data/t
;
;   get.text.data.z     ./functions/get.text.data/t
;
;   memory.switch       ./functions/memory.switch/t
;
;   open.descriptor     ./functions/open.descriptor/t
;
;   read.descriptor     ./functions/read.descriptor/t
;
;   text.data.filename  ./functions/main/text.init/d
;

    get.text.data:    pop   ebp                 ; Preserve return address.
                      pop   edi                 ; Preserve index to requested data.

                      cmp   edi, 0              ; Are we at the zero index?
                      jnz   get.text.data.nz    ; No - proceed uninterrupted.

                      push  dword.l             ; Yes - ask for at least a dword of memory, or we're going to run into problems later.
                      jmp   get.text.data.z     ; Proceed.

    get.text.data.nz: push  edi                 ; Ask for enough memory for the entire index.

    get.text.data.z:  call  memory.switch       ; Reserve memory for the index operation.

                      push  ebx                 ; Preserve pointer to new memory.

                      push  text.data.filename  ; Point open.descriptor to the indexed data repository.
                      call  open.descriptor     ; Associate a descriptor with the indexed data repository.

                      pop   ebx                 ; Restore pointer to new memory.
                    
                      push  eax                 ; Preserve descriptor associated with indexed data repository.
                      push  ebx                 ; Preserve pointer to new memory.
                      push  ebp                 ; Preserve return address.

                      push  edi                 ; Tell read.descriptor to read up to the index point.
                      push  ebx                 ; Point read.descriptor to new memory.
                      push  eax                 ; Point read.descriptor to the indexed data repository.
                      call  read.descriptor     ; Read indexed data up to the index point.

                      pop   ebp                 ; Restore return address.
                      pop   ebx                 ; Restore pointer to new memory.
                      pop   eax                 ; Restore descriptor associated with indexed data repository.

                      push  eax                 ; Preserve descriptor associated with indexed data repository.
                      push  ebx                 ; Preserve pointer to new memory.
                      push  ebp                 ; Preserve return address.

                      push  dword.l             ; Tell read.descriptor to read the dword length of the indexed data.
                      push  ebx                 ; Point read.descriptor to new memory.
                      push  eax                 ; Point read.descriptor to the descriptor associated with the indexed data repository.
                      call  read.descriptor     ; Read the length of the indexed data.

                      pop   ebp                 ; Restore return address.
                      pop   ebx                 ; Restore pointer to new memory.
                      pop   eax                 ; Restore descriptor associated with indexed data repository.

                      push  ebx                 ; Preserve pointer to new memory.
                      push  dword [ebx]         ; Preserve length of the indexed data.

                      push  eax                 ; Preserve descriptor associated with indexed data repository.
                      push  dword [ebx]         ; Preserve length of the indexed data.

                      push  dword [ebx]         ; Tell memory.switch to adjust reserved memory to the size of the indexed data.
                      call  memory.switch       ; Adjust reserved memory to the size of the indexed data.

                      pop   ecx                 ; Restore length of the indexed data.
                      pop   eax                 ; Restore descriptor associated with indexed data repository.

                      push  ebp                 ; Preserve return address.

                      push  ecx                 ; Tell read.descriptor to read the entire indexed string.
                      push  ebx                 ; Point read.descriptor to new memory.
                      push  eax                 ; Point read.descriptor to the descriptor associated with the indexed data repository.
                      call  read.descriptor     ; Read the indexed string.

                      pop   ebp                 ; Restore return address.

                      call  close.descriptor    ; Disassociate the descriptor associated with the indexed data repository.

                      pop   edx                 ; Restore length of indexed data.
                      pop   ecx                 ; Restore pointer to indexed data.

                      push  ebp                 ; Restore return address.
                      ret                       ; Return to caller.
