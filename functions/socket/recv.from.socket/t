;================================================================================================================================================================================================
;
;   ./functions/socket/recv.from.socket/t
;
;   This function receives data from a connected socket and places it in a specified buffer.
;
;   Assumptions:    esi = Index to connection tables.
;
;   Returns:        None.
;
;------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
;
;   Symbolic Cross-Referencing
;
;   buffer.1                            ./functions/b
;
;   buffer.1.l                          ./functions/b
;
;   buffer.strip                        ./functions/buffer.strip/t
;
;   connection.descriptor.index         ./functions/main/system.check/b
;
;   dword.l                             ./b
;
;   sys.socket.call                     ./functions/socket/b
;
;   sys.socket.recv                     ./functions/socket/recv.from.socket/b
;
;   sys.system.call                     ./functions/b
;

    recv.from.socket: pop   edx                                     ; Preserve return address.

                      push  0                                       ; No flags.
                      push  buffer.1.l                              ; Provide length of buffer.
                      push  buffer.1                                ; Point recv.from.socket to data buffer.
                      push  dword [esi+connection.descriptor.index] ; Point recv.from.socket to target socket.

                      mov   eax, sys.socket.call                    ; eax - Socket call indicator.
                      mov   ebx, sys.socket.recv                    ; ebx - Receive from socket.
                      mov   ecx, esp                                ; ecx - Pointer to arguments package.
                      int   sys.system.call                         ; Receive from socket.

                      push  edx                                     ; Keep buffer.strip from clobbering return address.

                      push  eax                                     ; Tell buffer.strip how many characters to check.
                      push  buffer.1                                ; Pointer buffer.strip to buffer.1.
                      call  buffer.strip                            ; Strip carriage returns from received data.

                      pop   edx                                     ; Put return address back where it was, now that it's safe.

                      push  edx                                     ; Restore return address.

                      ret   (dword.l * 4)                           ; Return to caller.
