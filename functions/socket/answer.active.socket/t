;================================================================================================================================================================================================
;
;   ./functions/socket/answer.active.socket/t
;
;   This code determines the status of an active socket and routes the data to the appropriate handler.
;
;   Assumptions:    Stack Frame:  dword [Pointer to active socket structure]
;                                 dword [Pointer to socket filename]
;                                 byte  [Connection status index]
;
;   Returns:        None.
;
;------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
;
;   Symbolic Cross-Referencing
;
;   No external references.
;

    answer.active.socket:           pop   edx                                                         ; edx - Return address.

                                    push  address.login.status                                        ; Set up pointer to address.login.status
                                    push  address.passphrase.status                                   ; Set up pointer to address.passphrase.status
                                    push  address.set.passphrase.status                               ; Set up pointer to address.set.passphrase.status
                                    push  address.active.status                                       ; Set up pointer to address.active.status

                                    push  edx                                                         ; Restore return address.

                                    mov   ebp, esp                                                    ; ebp - Prepared to be used as a data pointer.
                                    add   ebp, aas.packet                                             ; ebp - Data pointer.

                                    push  dword [text.data.index.local.data.active.socket.message]    ; Pointer to socket activity notifier.
                                    call  write.console                                               ; Let the admin know we're working with an active socket.

                                    push  sys.standard.output                                         ; Point write.descriptor to standard output.
                                    push  dword [ebp + aas.packet.type + word.l]                      ; Point write descriptor to the socket type.
                                    push  1                                                           ; Tell write descriptor to write one byte.
                                    call  write.descriptor                                            ; Tell the admin what type of socket we're working with.

                                    push  sys.standard.output                                         ; Point write.descriptor to standard output.
                                    push  dword [ebp + aas.packet.type + word.l]                      ; Point write.descriptor to the socket id.
                                    push  dword.l                                                     ; Tell write.descriptor to write one dword.
                                    call  write.descriptor                                            ; Tell the admin which socket we're working with.

                                    push  dword [text.data.index.local.data.carriage.return.message]  ; Point write.console to the carriage return.
                                    call  write.console                                               ; Write a carriage return to the console.

                                    mov   ebx, aas.packet.statii                                      ; ebx - Pointer to potential handler.
                                    mov   ecx, aas.packet.status                                      ; ecx - Socket status.

                                    repnz add ebx, dword.l                                            ; ebx - Pointer to correct handler for socket status.

                                    call  ebx                                                         ; Go handle the data.

                                    ret   aas.packet                                                  ; Return to caller.
