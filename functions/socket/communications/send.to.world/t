;================================================================================================================================================================================================
;
;   ./functions/socket/communications/send.to.world/t
;
;   This function sends a provided message out to the whole world.
;
;   Assumptions:    Stack Frame:  dword - Index of message to be broadcast.
;                   al - Buffer mode indicator (!1)
;
;                   - OR -
;
;                   Stack Frame:  dword - Length of buffered data.
;                                 dword - Pointer to buffered data.
;                   al - Buffer mode indicator (1)
;
;   Returns:        None.
;
;------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
;
;   Symbolic Cross-Referencing
;
;   a.p.data.gylf                                       ./b
;
;   connection.entry.size                               ./functions/main/system.check/b
;
;   connection.table                                    ./functions/main/system.check/b
;
;   dword.l                                             ./b
;
;   send.to.world.buf.p                                 ./functions/socket/communications/send.to.world/t
;
;   send.to.world.buf.s                                 ./functions/socket/communications/send.to.world/t
;
;   send.to.world.buf.sret                              ./functions/socket/communications/send.to.world/t
;
;   send.to.world.c                                     ./functions/socket/communications/send.to.world/t
;
;   send.to.world.loop                                  ./functions/socket/communications/send.to.world/t
;
;   socket.number                                       ./b
;
;   socket.send                                         ./functions/socket/socket.send/t
;
;   text.data.index.local.data.carriage.return.message  ./functions/main/text.init/b
;
;   write.prompt                                        ./functions/write.prompt/t
;

    send.to.world:            pop   ebp                                                         ; Preserve return address.

                              cmp   al, 1                                                       ; Buffered mode?
                              jz    send.to.world.loop                                          ; Yes. Skip popping the index.

                              pop   edx                                                         ; edx - Index to message.

                              sub   ecx, ecx                                                    ; ecx - First id to notify.

;------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

    send.to.world.loop:       cmp   ecx, [a.p.data.gylf + gylf.connection.external.index]       ; Does this id belong to the performer?
                              jz    send.to.world.loop.next                                     ; Skip this id.
    
                              push  edx                                                         ; Preserve index to message.

                              push  ecx                                                         ; Point get.participant.data.by.id to the next id in line.
                              call  get.participant.data.by.id                                  ; Populate g.data with the participant data to which to send.

                              or    eax, eax                                                    ; Are we finished?
                              js    send.to.world.c                                             ; Yes. Go clean up and return to caller.

                              push  ebp                                                         ; Preserve return address.

                              cmp   al, 1                                                       ; Buffered mode?
                              jz    send.to.world.buf.s                                         ; Yes - go activate socket.send.buf instead.

                              push  dword [g.data + gylf.connection.external.index]             ; Point socket.send to connection to notify.
                              push  edx                                                         ; Point socket.send to index.
                              call  socket.send                                                 ; Send the message to the socket.

    send.to.world.loop.next:  inc   eax                                                         ; eax - Next id to notify.
                              jmp   send.to.world.loop                                          ; Go notify the next id.

    send.to.world.buf.sret:   push  eax                                                         ; Preserve buffered indicator.
    
                              push  dword [g.data + gylf.connection.external.index]             ; Point socket.send to connection to notify.
                              push  dword [text.data.index.local.data.carriage.return.message]  ; Point send function to a carriage return.
                              call  socket.send                                                 ; Broadcast a carriage return.

                              call  write.prompt                                                ; Send a prompt.

                              pop   eax                                                         ; Restore buffered indicator.
                              pop   ebp                                                         ; Restore return address.

                              jmp   send.to.world.loop.next                                     ; Go broadcast to the next id.

    send.to.world.c:          pop   esi                                                         ; Restore caller's esi register.

                              push  ebp                                                         ; Restore return address.

                              ret                                                               ; Return to caller.

;------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

    send.to.world.buf.s:      push  eax                                                         ; Preserve buffered indicator.

                              push  dword [g.data + gylf.connection.external.index]             ; Point socket.send to connection to notify.
                              push  dword [esp+(dword.l * 7)]                                   ; Point socket.send.buf to the data.
                              push  dword [esp+(dword.l * 5)]                                   ; Tell socket.send.buf how long the data is.
                              push  dword 00000000h                                             ; Flags for send function.
                              call  socket.send                                                 ; Send the data.

                              pop   eax                                                         ; Restore buffered indicator.

                              jmp   send.to.world.buf.sret                                      ; Resume loop.
