;================================================================================================================================================================================================
;
;   ./functions/socket/communications/send.to.world/t
;
;   This function sends a provided message out to the whole world.
;
;   Assumptions:    Stack Frame:  dword - Index of message to be broadcast.
;                   al - Buffer mode indicator (!1)
;
;                   - OR -
;
;                   Stack Frame:  dword - Length of buffered data.
;                                 dword - Pointer to buffered data.
;                   al - Buffer mode indicator (1)
;
;   Returns:        None.
;
;------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
;
;   Symbolic Cross-Referencing
;
;   connection.entry.size                               ./functions/main/system.check/b
;
;   connection.table                                    ./functions/main/system.check/b
;
;   dword.l                                             ./b
;
;   send.to.world.buf.p                                 ./functions/socket/communications/send.to.world/t
;
;   send.to.world.buf.s                                 ./functions/socket/communications/send.to.world/t
;
;   send.to.world.buf.sret                              ./functions/socket/communications/send.to.world/t
;
;   send.to.world.c                                     ./functions/socket/communications/send.to.world/t
;
;   send.to.world.loop                                  ./functions/socket/communications/send.to.world/t
;
;   socket.number                                       ./b
;
;   socket.send                                         ./functions/socket/socket.send/t
;
;   text.data.index.local.data.carriage.return.message  ./functions/main/text.init/b
;
;   write.prompt                                        ./functions/write.prompt/t
;

    send.to.world:          pop   ebp                                                         ; Preserve return address.

                            cmp   al, 1                                                       ; Buffered mode?
                            jz    send.to.world.buf.p                                         ; Yes. Skip popping the index.

                            pop   edx                                                         ; edx - Index to message.

    send.to.world.buf.p     push  esi                                                         ; Preserve caller's esi register.

                            mov   esi, connection.table                                       ; esi - Index to socket entries.
                            mov   ecx, socket.number                                          ; ecx - Number of sockets in table; we use this number as our loop counter.

                            push  esi                                                         ; Preserve caller's esi register.

                            mov   esi, connection.table                                       ; esi - Index to socket entries.
                            mov   ecx, socket.number                                          ; ecx - Number of sockets in table; we use this number as our loop counter.

;------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

    send.to.world.loop:     push  ecx                                                         ; Preserve number of sockets.
                            push  edx                                                         ; Preserve index to message.

                            push  ebp                                                         ; Preserve return address.

                            cmp   al, 1                                                       ; Buffered mode?
                            jz    send.to.world.buf.s                                         ; Yes - go activate socket.send.buf instead.

                            push  edx                                                         ; Point socket.send to index.
                            call  socket.send                                                 ; Send the message to the socket.

    send.to.world.buf.sret: push  dword [text.data.index.local.data.carriage.return.message]  ; Point send function to a carriage return.
                            call  socket.send                                                 ; Broadcast a carriage return.

                            call  write.prompt                                                ; Send a prompt.

                            pop   ebp                                                         ; Restore return address.

                            add   esi, connection.entry.size                                  ; esi - Pointer to next descriptor in table.

                            pop   edx                                                         ; Restore return address.
                            pop   ecx                                                         ; Restore number of sockets.
                        
                            loop  send.to.world.loop                                          ; Go broadcast to the next socket in the table.

                            cmp   al, 1                                                       ; Buffered mode?
                            jnz   send.to.world.c                                             ; No. Go skip restoring the stack.

                            pop   ecx                                                         ; Killing the pointer to the buffer...
                            pop   ecx                                                         ; Killing the size of the buffered data...

    send.to.world.c         pop   esi                                                         ; Restore caller's esi register.

                            push  ebp                                                         ; Restore return address.

                            ret                                                               ; Return to caller.

;------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

    send.to.world.buf.s     push  dword [esp+(dword.l * 4)]                                   ; Tell socket.send.buf how long the data is.
                            push  dword [esp+(dword.l * 3)]                                   ; Point socket.send.buf to the data.
                            call  socket.send.buf                                             ; Send the data.

                            jmp   send.to.world.buf.sret                                      ; Resume loop.
