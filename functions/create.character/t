;================================================================================================================================================================================================
;
;   ./functions/create.character/t
;
;   This function builds out character data on the basis of the DNA sequences provided by the parents of the egg.
;
;   Assumptions:    eax - Descriptor associated with an egg file.
;                   esi - Index to socket entry.
;
;   Returns:        None.
;
;------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
;
;   Symbolic Cross-Referencing
;
;   area.description                                    ./commands/area/b
;
;   area.description.l                                  ./commands/area/b
;
;   area.filename                                       ./functions/d
;
;   area.filename.increment.cmp                         ./functions/create.character/t
;
;   area.filename.next.digit.increment                  ./functions/create.character/t
;
;   area.filename.out.of.ids                            ./functions/create.character/t
;
;   area.header                                         ./commands/area/b
;
;   area.header.l                                       ./commands/area/b
;
;   area.name                                           ./functions/create.character/t
;
;   area.name.l                                         ./functions/create.character/t
;
;   buffer.1                                            ./functions/b
;
;   buffer.2                                            ./functions/b
;
;   build.pouch                                         ./functions/create.character/t
;
;   build.pouch.area.name                               ./functions/create.character/t
;
;   build.pouch.found.open.id                           ./functions/create.character/t
;
;   build.pouch.increment.byte                          ./functions/create.character/t
;
;   character.data                                      ./functions/b
;
;   character.data.l                                    ./functions/b
;
;   character.father                                    ./functions/b
;
;   character.father.l                                  ./functions/b
;
;   character.mother                                    ./functions/b
;
;   character.mother.l                                  ./functions/b
;
;   character.pouch                                     ./functions/b
;
;   clean.socket                                        ./functions/clean.socket/t
;
;   close.descriptor                                    ./functions/close.descriptor/t
;
;   connection.filename.index                           ./functions/main/system.check/b
;
;   create.file                                         ./functions/create.file/t
;
;   dna.lab                                             ./functions/dna.lab/t
;
;   dword.l                                             ./b
;
;   egg.area.id                                         ./commands/egg/d
;
;   egg.data                                            ./commands/egg/b
;
;   egg.data.l                                          ./commands/egg/b
;
;   egg.father                                          ./commands/egg/b
;
;   egg.father.l                                        ./commands/egg/b
;
;   egg.hatch.message                                   ./commands/egg/d
;
;   egg.hatch.message.l                                 ./commands/egg/d
;
;   egg.mother                                          ./commands/egg/b
;
;   egg.mother.l                                        ./commands/egg/b
;
;   id.size                                             ./functions/b
;
;   open.descriptor                                     ./functions/open.descriptor/t
;
;   pouch.declaration                                   ./functions/d
;
;   pouch.declaration.l                                 ./functions/d
;
;   pouch.description                                   ./functions/d
;
;   pouch.description.l                                 ./functions/d
;
;   read.descriptor                                     ./functions/read.descriptor/t
;
;   send.to.area                                        ./functions/socket/communications/send.to.area/t
;
;   socket.data.out.of.area.ids.message                 ./functions/d
;
;   socket.data.out.of.area.ids.message.l               ./functions/d
;
;   socket.send                                         ./functions/socket/socket.send/t
;
;   text.data.index.local.data.out.of.area.ids.message  ./functions/main/text.init/b
;
;   write.console                                       ./functions/write.console/t
;
;   write.descriptor                                    ./functions/write.descriptor/t
;


    create.character:                   push  egg.data.l                                      ; Tell read.descriptor the length of egg data.
                                        push  egg.data                                        ; Point read.descriptor to buffer in which to store the egg data.
                                        push  eax                                             ; Point read.descriptor to descriptor associated with the egg file.
                                        call  read.descriptor                                 ; Read the egg data into the buffer.

                                        call  close.descriptor                                ; Close the egg file.

                                        push  esi                                                         ; Preserve index to socket entry.

                                        sub   ecx, ecx                                                    ; ecx - Prepared for loading.
                                        mov   cl, byte [egg.mother.l]                                     ; ecx - length of mother's name.
                                        mov   esi, egg.mother                                             ; esi - pointer to mother's name.
                                        mov   edi, character.mother                                       ; edi - pointer to entry for mother's name on character template.

                                        mov   byte [character.mother.l], cl                               ; Store length of mother's name in character template.
                                        repnz movsb                                                       ; Store mother's name in character template.
                
                                        sub   ecx, ecx                                                    ; ecx - Prepared for loading.
                                        mov   cl, byte [egg.father.l]                                     ; ecx - length of father's name.
                                        mov   esi, egg.father                                             ; esi - pointer to father's name.
                                        mov   edi, character.father                                       ; edi - pointer to entry for father's name on character template.

                                        mov   byte [character.father.l], cl                               ; Store length of father's name in character template.
                                        repnz movsb                                                       ; Store father's name in character template.

                                        pop   esi                                                         ; Restore index to socket entry.

                                        mov   ebp, 00000001h                                              ; ebp - current area id.

;------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

    build.pouch:                        push  esi                                                         ; Preserve index to socket entry.

                                        push  area.filename                                               ; Point open.descriptor to filename for area to be created.
                                        call  open.descriptor                                             ; Attempt to associate a descriptor with the file.

                                        or    eax, eax                                                    ; Were we able to associate a descriptor with the filename?
                                        js    build.pouch.found.open.id                                   ; No. We've found an open id to use - let's go use it.
                        
                                        mov   ebx, eax                                                    ; Yes. Let's close it up so we can search the next id up the ladder. ebx - descriptor
                                                                                                          ; to be disassociated.
                                        call  close.descriptor                                            ; Disassociate that descriptor.

                                        inc   ebp                                                         ; ebp - next area id to check.
                                        mov   esi, area.filename+id.size                                  ; esi - pointer to area filename.

                                        jmp   area.filename.increment.cmp                                 ; Go see if we've traversed the entire filename.

;------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

    build.pouch.increment.byte:         inc   byte [esi]                                                  ; No. Increment the byte.

                                        jmp   build.pouch                                                 ; Try the new area id.

;------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

    area.filename.next.digit.increment: mov   byte [esi], 00h                                             ; Zero the current byte...
                                        dec   esi                                                         ; Move up the filename to the next byte...

;------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

    area.filename.increment.cmp:        cmp   esi, area.filename-1                                        ; Have we traversed the entire filename?
                                        jz    area.filename.out.of.ids                                    ; Yes. Go display an error on local and remote terminals and disconnect the socket.

                                        cmp   byte [esi], 39h                                             ; Is the byte a 9?
                                        jz    area.filename.next.digit.increment                          ; Yes. Zero it and move up the filename to the next digit.

                                        jmp   build.pouch.increment.byte                                  ; No. Increment the byte and try the next id.

;------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

    area.filename.out.of.ids:           pop   esi                                                         ; esi - Index to socket entry.

                                        push  socket.data.out.of.area.ids.message.l                       ; Store length of message for send function.
                                        push  socket.data.out.of.area.ids.message                         ; Point send function to message indicating that we're fresh out of area ids.
                                        call  socket.send                                                 ; Send the message on the socket.

                                        call  clean.socket                                                ; Disconnect the current socket.

                                        push  dword [text.data.index.local.data.out.of.area.ids.message]  ; Pointer to local message indicating that we're fresh out of area ids.
                                        call  write.console                                               ; Tell the admin that we're fresh out of area ids.

                                        ret                                                               ; Return to caller.

;------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

    build.pouch.found.open.id:          mov   eax, egg.area.id                                            ; eax - area id associated with egg.
                                        mov   ebx, egg.hatch.message                                      ; ebx - pointer to message indicating that the egg is about to hatch.
                                        mov   edx, egg.hatch.message.l                                    ; edx - length of message.
                                        call  send.to.area                                                ; Tell the area where the egg is sitting that the egg is beginning to hatch.
                
                                        pop   esi                                                         ; esi - Index to socket entry.

                                        mov   dword [character.pouch], ebp                                ; Store area id for character pouch.
                                        push  area.filename                                               ; Point create.file to file to be created for character pouch.
                                        call  create.file                                                 ; Create the file.

                                        push  eax                                                         ; Store descriptor associated with new pouch.

                                        sub   al, al                                                      ; al - prepared for use as counter.

                                        push  esi                                                         ; Preserve index to socket entry.

                                        add   esi, connection.filename.index                              ; esi - pointer to socket filename.
                                        mov   edi, area.name                                              ; edi - pointer to buffer for area name.

;------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

    build.pouch.area.name:              movsb                                                             ; Store a byte of the filename.
                                        inc   al                                                          ; Add a byte to the size of the filename.

                                        cmp   byte [esi], 00h                                             ; Have we reached the end of the filename?
                                        jnz   build.pouch.area.name                                       ; Nope. Go store the rest of the filename.

                                        add   al, pouch.declaration.l                                     ; al - length of filename+length of pouch declaration.
                        
                                        mov   byte [area.name.l], al                                      ; Store length of filename + length of pouch declaration.
                                        mov   esi, pouch.declaration                                      ; esi - pointer to pouch declaration.
                                        mov   ecx, pouch.declaration.l                                    ; ecx - length of pouch declaration.
                                        repnz movsb                                                       ; Write pouch declaration to area.name.

                                        mov   byte [area.description.l], pouch.description.l              ; Store length of pouch description.
                                        mov   esi, pouch.description                                      ; esi - pointer to pouch description.
                                        mov   edi, area.description                                       ; edi - pointer to storage for are description.
                                        mov   ecx, pouch.description.l                                    ; ecx - length of pouch description.
                                        repnz movsb                                                       ; Write pouch description to storage for area description.

                                        pop   esi                                                         ; Restore index to socket entry.
                                        pop   ebx                                                         ; Restore descriptor associated with pouch.

                                        push  ebx                                                         ; Descriptor associated with pouch.
                                        push  area.header                                                 ; Pointer to area header.
                                        push  area.header.l                                               ; Length of area header.
                                        call  write.descriptor                                            ; Write area header for pouch to area file.

                                        call  close.descriptor                                            ; Disassociate the descriptor with the area file.

                                        call  dna.lab                                                     ; Figure up the DNA for the new Gylf.

                                        mov   ebx, esi                                                    ; ebx - Index to socket table.
                                        push  connection.filename.index                                   ; Point create.file to filename associated with active connection.
                                        call  create.file                                                 ; Smoke the egg and create a new file.

                                        push  eax                                                         ; Preserve descriptor associated with new file.

                                        push  eax                                                         ; Point write function to new file.
                                        push  buffer.2                                                    ; Pointer to length of passphrase data.
                                        push  dword.l                                                     ; Length of passphrase data.
                                        call  write.descriptor                                            ; Write length of passphrase data to new file.

                                        pop   eax                                                         ; Restore descriptor associated with new file.
                                        push  eax                                                         ; Preserve descriptor associated with new file.

                                        push  eax                                                         ; Point write function to new file.
                                        push  buffer.1                                                    ; Pointer to received passphrase data.
                                        push  dword [buffer.2]                                            ; Length of passphrase data.
                                        call  write.descriptor                                            ; Write passphrase data to new file.

                                        pop   eax                                                         ; Restore descriptor associated with new file.
                                        push  eax                                                         ; Preserve descriptor associated with new file.

                                        push  eax                                                         ; Point write function to new file.
                                        push  character.data                                              ; Pointer to generated character data.
                                        push  character.data.l                                            ; Length of character data.
                                        call  write.descriptor                                            ; Write character data to new file.

                                        pop   eax                                                         ; Restore descriptor associated with new file.
                                        call  close.descriptor                                            ; Disassociate descriptor.
                
                                        ret                                                               ; Return to caller.
