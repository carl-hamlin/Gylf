;================================================================================================================================================================================================
;
;   ./functions/get.participant.data.by.name/t
;
;   This function returns participant data in g.data corresponding to a provided name, or an error in the case of an id that does not exist.
;
;   Assumptions:    Stack Frame:  ebp - Populated answer.active.socket.packet.
;
;   Returns:        [d.data] - Data for the requested ghost.
;                   [e.data] - Data for the requested egg.
;                   [g.data] - Data for the requested gylf.
;
;                   - OR -
;
;                   eax - Error.
;
;------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
;
;   Symbolic Cross-Referencing
;
;   ./b                                         dword.l
;
;   ./functions/b                               buffer.1
;
;   ./functions/close.descriptor/t              close.descriptor
;
;   ./functions/convert.binary.id.to.ascii.id/t convert.binary.id.to.ascii.id
;
;   ./functions/d                               egg.filename
;                                               ghost.filename
;                                               gylf.filename
;
;   ./functions/get.participant.data.by.name/t  get.participant.data.by.name.done
;                                               get.participant.data.by.name.error
;                                               get.participant.data.by.name.lookup.loop
;                                               get.participant.data.no.egg.name
;                                               get.participant.data.no.ghost.name
;                                               get.participant.data.no.gylf.name
;
;   ./functions/open.descriptor/t               open.descriptor
;
;   ./functions/read.descriptor/t               read.descriptor
;
;   ./functions/socket/answer.active.socket/s   answer.active.socket.packet.bpointer
;                                               answer.active.socket.packet.bsize
;                                               answer.active.socket.packet.fpointer
;                                               answer.active.socket.packet.rsize
;
;   ./s                                         egg.name
;                                               ghost.name
;                                               gylf.name
;

    get.participant.data.by.name:             push  ebx                                                                 ; Preserve caller's ebx.
                                              push  esi                                                                 ; Preserve caller's esi.
                                              push  edi                                                                 ; Preserve caller's edi.

                                              sub   ebx, ebx                                                            ; ebx - Prepared to represent IDs against which to look up.

    get.participant.data.by.name.lookup.loop: push  ebx                                                                 ; Store id against which to lookup.
    
                                              mov   eax, dword [ebp - answer.active.socket.packet.fpointer]             ; eax - Pointer to specified filename.
                                              add   eax, dword.l                                                        ; eax - Pointer to buffer into which to write the converted id.

                                              push  eax                                                                 ; Point convert.binary.id.to.ascii.id to the specified buffer.
                                              push  ebx                                                                 ; Point convert.binary.id.to.ascii.id to the id to lookup.
                                              call  convert.binary.id.to.ascii.id                                       ; Convert the id to ASCII.

                                              push  dword [ebp - answer.active.socket.packet.fpointer]                  ; Point open.descriptor to the newly created filename containing the
                                                                                                                        ; converted id.
                                              call  open.descriptor                                                     ; Attempt to open the file for reading.

                                              or    eax, eax                                                            ; Did we successfully open the file for reading?
                                              js    get.participant.data.by.name.error                                  ; NO! We're done here; restore the return address and return to sender
                                                                                                                        ; with the
                                                                                                                        ; error code in eax.

                                              push  eax                                                                 ; Store file descriptor for closing after read.

                                              push  eax                                                                 ; Point read.descriptor to the target data file.
                                              push  dword [ebp - answer.active.socket.packet.bpointer]                  ; Point read.descriptor to specified buffer.
                                              push  dword [ebp - answer.active.socket.packet.bsize]                     ; Tell read.descriptor to read the whole file.
                                              call  read.descriptor                                                     ; Read that data into the specified buffer.

                                              call  close.descriptor                                                    ; Close the file.

                                              pop   ebx                                                                 ; Restore id against which to lookup.
                                              inc   ebx                                                                 ; ebx - Next id.

                                              mov   esi, buffer.1                                                       ; esi - Pointer to name against which to lookup.
                                              mov   edi, dword [ebp - answer.active.socket.packet.bpointer]             ; edi - Prepared to be used as buffer pointer.

                                              cmp   dword [ebp - answer.active.socket.packet.fpointer], egg.filename    ; Are we looking at an egg?
                                              jnz   get.participant.data.no.egg.name                                    ; No. Go see if we're looking at a gylf.

                                              add   edi, egg.name                                                       ; Yes. Set up the buffer.

    get.participant.data.no.egg.name:         cmp   dword [ebp - answer.active.socket.packet.fpointer], gylf.filename   ; Are we looking at a gylf?
                                              jnz   get.participant.data.no.gylf.name                                   ; No. Go see if we're looking at a ghost.

                                              add   edi, gylf.name                                                      ; Yes. Set up the buffer.

    get.participant.data.no.gylf.name:        cmp   dword [ebp - answer.active.socket.packet.fpointer], ghost.filename  ; Are we looking at a ghost?
                                              jnz   get.participant.data.no.ghost.name                                  ; No. At this point, we've got the buffer set up, or something *horrible*
                                                                                                                        ; has happened. Move on.

                                              add   edi, ghost.name                                                     ; Yes. Set up the buffer.

    get.participant.data.no.ghost.name:       mov   ecx, dword [ebp - answer.active.socket.packet.rsize]                ; ecx - Length of retrieved name.
                                              repz  cmpsb                                                               ; Are they the same names?

                                              jnz   get.participant.data.by.name.lookup.loop                            ; NO! Go check the next id.

                                              jmp   get.participant.data.by.name.done                                   ; Go restore the caller's registers and return to caller.
                                              
    get.participant.data.by.name.error:       pop   ebx                                                                 ; Restore ebx to the correct id.

    get.participant.data.by.name.done:        pop   edi                                                                 ; Restore caller's edi.
                                              pop   esi                                                                 ; Restore caller's esi.
                                              pop   ebx                                                                 ; Restore caller's ebx.

                                              ret                                                                       ; Return to caller.
