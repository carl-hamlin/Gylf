;================================================================================================================================================================================================
;
;   ./functions/main/active.socket.poll/t
;
;   This function runs through the list of potentially active connections and checks each of them for activity. Upon discovering activity in a connection, the function then passes control
;   off to the answer.active.socket function for more specialized treatment.
;
;   Assumptions:    None.
;
;   Returns:        None.
;
;------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
;
;   Symbolic Cross-Referencing
;
;   active.socket.poll.done               ./functions/main/active.socket.poll/t
;
;   active.socket.poll.eggs               ./functions/main/active.socket.poll/t
;
;   active.socket.poll.eggs.done          ./functions/main/active.socket.poll/t
;
;   active.socket.poll.eggs.inactive      ./functions/main/active.socket.poll/t
;
;   active.socket.poll.gylf               ./functions/main/active.socket.poll/t
;
;   active.socket.poll.gylf.done          ./functions/main/active.socket.poll/t
;
;   active.socket.poll.gylf.inactive      ./functions/main/active.socket.poll/t
;
;   active.socket.poll.ghosts             ./functions/main/active.socket.poll/t
;
;   active.socket.poll.ghosts.inactive    ./functions/main/active.socket.poll/t
;
;   answer.active.socket                  ./functions/socket/answer.active.socket/t
;
;   close.descriptor                      ./functions/close.descriptor/t
;
;   convert.binary.id.to.ascii.id         ./functions/convert.binary.id.to.ascii.id/t
;
;   d.data                                ./b
;
;   e.data                                ./b
;
;   g.data                                ./b
;
;   egg.filename                          ./functions/d
;
;   ghost.filename                        ./functions/d
;
;   gylf.filename                         ./functions/d
;
;   open.descriptor                       ./functions/open.descriptor/t
;
;   poll.descriptor                       ./functions/poll.descriptor/t
;
;   read.descriptor                       ./functions/read.descriptor/t
;
;   socket.data.active.socket.descriptor  ./functions/main/active.socket.descriptor/d
;
;   sys.poll.in                           ./functions/main/b
;

    active.socket.poll:                 sub   edx, edx                                                ; edx - First id in the list.
                                        push  edx                                                     ; Preserve first id.

;------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

    active.socket.poll.logins:          mov   eax, dword [top.login]                                  ; eax - Highest current login id.
                                        inc   eax                                                     ; eax - Target indicator for discontinuation of login polling.

                                        cmp   edx, eax                                                ; Have we reached the last login in our list?
                                        jz    active.socket.poll.logins.done                          ; Yes. Go set up for eggs.

                                        push  login.filename + dword.l                                ; Point convert.binary.id.to.ascii.id to the login filename.
                                        push  edx                                                     ; Point convert.binary.id.to.ascii.id to the first id in the list.
                                        call  convert.binary.id.to.ascii.id                           ; Set up the id for reading.

                                        push  login.filename                                          ; Point open.descriptor to the login filename.
                                        call  open.descriptor                                         ; Associate a descriptor with the socket.

                                        or    eax, eax                                                ; Were we able to associate a descriptor?
                                        js    active.socket.poll.logins.inactive                      ; Nope. Empty login. Move on to the next.

                                        push  eax                                                     ; Preserve descriptor for close.descriptor.

                                        push  eax                                                     ; Point read.descriptor to the descriptor we associated with the socket.
                                        push  l.data                                                  ; Tell read.descriptor to read the login into l.data.
                                        push  login_size                                              ; Tell read.descriptor to read an entire login.
                                        call  read.descriptor                                         ; Read the login.

                                        call  close.descriptor                                        ; Close the login file.

                                        mov   eax, dword [l.data + login.connection.descriptor.index] ; eax - Descriptor associated with poll target.
                                        mov   dword [socket.data.active.socket.descriptor], eax       ; Plug the descriptor into our polling packet.

                                        push  socket.data.active.socket.descriptor                    ; Point poll.descriptor to the poll target.
                                        call  poll.descriptor                                         ; Ask the socket whether or not it has incoming data for us to process.

                                        cmp   eax, sys.poll.in                                        ; Does the socket have incoming data?
                                        jnz   active.socket.poll.logins.inactive                      ; No. Don't do anything more with it.

                                        push  dword socket.data.active.socket.descriptor              ; Yes. Point answer.active.socket to the active socket.
                                        push  dword a.p.type.login                                    ; Tell answer.active.socket that we're dealing with a login.
                                        push  dword login.status                                      ; Tell answer.active.socket to deal with login status.
                                        push  dword 00000000h                                         ; Reserve storage for type pointer.
                                        push  dword 00000000h                                         ; Reserve storage for id pointer.
                                        push  dword 00000000h                                         ; Reserve storage for buffer pointer.
                                        push  dword 00000000h                                         ; Reserve storage for size of buffer.
                                        push  dword 00000000h                                         ; Reserve storage for size of retrieved data.
                                        push  dword 00000000h                                         ; Reserve storage for filename pointer.

                                        call  answer.active.socket                                    ; Go process the data on the socket.

    active.socket.poll.logins.inactive: inc   edx                                                     ; edx - Next socket to poll.
                                        jmp   active.socket.poll.logins                               ; Go poll the next socket.

    active.socket.poll.logins.done      pop   edx                                                     ; edx - First socket id.
                                        push  edx                                                     ; Preserve first socket id.

;------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

    active.socket.poll.eggs:            mov   eax, dword [top.egg]                                    ; eax - Highest current egg id.
                                        inc   eax                                                     ; eax - Target indicator for discontinuation of login polling.

                                        cmp   edx, eax                                                ; Have we reached the last egg in our list?
                                        jz    active.socket.poll.eggs.done                            ; Yes. Go set up for gylf.    

                                        push  egg.filename + dword.l                                  ; Point convert.binary.id.to.ascii.id to the egg filename.
                                        push  edx                                                     ; Point convert.binary.id.to.ascii.id to the first id in the list.
                                        call  convert.binary.id.to.ascii.id                           ; Set up the id for reading.

                                        push  egg.filename                                            ; Point open.descriptor to the egg filename.
                                        call  open.descriptor                                         ; Associate a descriptor with the socket.

                                        or    eax, eax                                                ; Were we able to associate the descriptor?
                                        js    active.socket.poll.eggs.inactive                        ; No. Empty egg. Move on to the next.

                                        push  eax                                                     ; Preserve descriptor for close.descriptor.

                                        push  eax                                                     ; Point read.descriptor to the descriptor we associated with the socket.
                                        push  e.data                                                  ; Tell read.descriptor to read the egg into e.data.
                                        push  egg_size                                                ; Tell read.descriptor to read an entire egg.
                                        call  read.descriptor                                         ; Read the egg.

                                        call  close.descriptor                                        ; Close the socket file.

                                        cmp   dword [e.data + egg.connection.descriptor.index], 0     ; Is there an active connection associated with this credential?
                                        jz    active.socket.poll.eggs.inactive                        ; No. Don't do anything further with it.

                                        mov   eax, dword [e.data + egg.connection.descriptor.index]   ; eax - Descriptor associated with poll target.
                                        mov   dword [socket.data.active.socket.descriptor], eax       ; Plug the descriptor into our polling packet.

                                        push  socket.data.active.socket.descriptor                    ; Point poll.descriptor to the poll target.
                                        call  poll.descriptor                                         ; Ask the socket whether or not it has incoming data for us to process.

                                        cmp   eax, sys.poll.in                                        ; Does the socket have incoming data?
                                        jnz   active.socket.poll.eggs.inactive                        ; No. Don't do anything more with it.

                                        push  socket.data.active.socket.descriptor                    ; Yes. Point answer.active.socket to the active socket.
                                        push  a.p.type.egg                                            ; Tell answer.active.socket that we're dealing with an egg.

                                        sub   eax, eax                                                ; eax - Prepared to be used for connection status.
                                        mov   al, byte [e.data + egg.connection.status.index]         ; eax - Connection status.
                                        push  eax                                                     ; Tell answer active socket what the connection status is.

                                        push  dword 00000000h                                         ; Reserve storage for type pointer.
                                        push  dword 00000000h                                         ; Reserve storage for id pointer.
                                        push  dword 00000000h                                         ; Reserve storage for buffer pointer.
                                        push  dword 00000000h                                         ; Reserve storage for size of buffer.
                                        push  dword 00000000h                                         ; Reserve storage for size of retrieved data.
                                        push  dword 00000000h                                         ; Reserve storage for filename pointer.

                                        call  answer.active.socket                                    ; Go process the data on the socket.

    active.socket.poll.eggs.inactive:   inc   edx                                                     ; edx - Next socket to poll.
                                        jmp   active.socket.poll.eggs                                 ; Go poll the next socket.

    active.socket.poll.eggs.done:       pop   edx                                                     ; edx - First socket id.
                                        push  edx                                                     ; Preserve first socket id.

;------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

    active.socket.poll.gylf:            push  gylf.filename + dword.l                                 ; Point convert.binary.id.to.ascii.id to the gylf filename.
                                        push  edx                                                     ; Point convert.binary.id.to.ascii.id to the first id in the list.
                                        call  convert.binary.id.to.ascii.id                           ; Set up the id for reading.

                                        push  gylf.filename                                           ; Point open.descriptor to the gylf filename.
                                        call  open.descriptor                                         ; Associate a descriptor with the socket.

                                        or    eax, eax                                                ; Were we able to associate the descriptor?
                                        js    active.socket.poll.gylf.done                            ; No. Looks like we're done with gylf.

                                        push  eax                                                     ; Preserve descriptor for close.descriptor.

                                        push  eax                                                     ; Point read.descriptor to the descriptor we associated with the socket.
                                        push  g.data                                                  ; Tell read.descriptor to read the gylf into g.data.
                                        push  gylf_size                                               ; Tell read.descriptor to read an entire gylf.
                                        call  read.descriptor                                         ; Read the gylf.

                                        call  close.descriptor                                        ; Close the socket file.

                                        cmp   dword [g.data + gylf.connection.descriptor.index], 0    ; Is there an active connection associated with this credential?
                                        jz    active.socket.poll.gylf.inactive                        ; No. Don't do anything further with it.

                                        mov   eax, dword [g.data + gylf.connection.descriptor.index]  ; eax - Descriptor associated with the poll target.
                                        mov   dword [socket.data.active.socket.descriptor], eax       ; Plug the descriptor into our polling packet.

                                        push  socket.data.active.socket.descriptor                    ; Point poll.descriptor to the poll target.
                                        call  poll.descriptor                                         ; Ask the socket whether or not it has incoming data for us to process.

                                        cmp   eax, sys.poll.in                                        ; Does the socket have incoming data?
                                        jnz   active.socket.poll.gylf.inactive                        ; No. Don't do anything more with it.

                                        push  socket.data.active.socket.descriptor                    ; Yes. Point answer.active.socket to the active socket.
                                        call  answer.active.socket                                    ; Go process the data on the socket.

    active.socket.poll.gylf.inactive:   inc   edx                                                     ; edx - Next socket to poll.
                                        jmp   active.socket.poll.gylf                                 ; Go poll the next socket.

    active.socket.poll.gylf.done:       pop   edx                                                     ; edx - First socket id.

;------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

    active.socket.poll.ghosts:          push  ghost.filename + dword.l                                ; Point convert.binary.id.to.ascii.id to the ghost filename.
                                        push  edx                                                     ; Point convert.binary.id.to.ascii.id to the first id in the list.
                                        call  convert.binary.id.to.ascii.id                           ; Set up the id for reading.

                                        push  ghost.filename                                          ; Point open.descriptor to the ghost filename.
                                        call  open.descriptor                                         ; Associate a descriptor with the socket.

                                        or    eax, eax                                                ; Were we able to associate the descriptor?
                                        js    active.socket.poll.done                                 ; No. Looks like we're done with ghosts.

                                        push  eax                                                     ; Preserve descriptor for close.descriptor.

                                        push  eax                                                     ; Point read.descriptor to the descriptor we associated with the socket.
                                        push  d.data                                                  ; Tell read.descriptor to read the ghost into d.data.
                                        push  ghost_size                                              ; Tell read.descriptor to read an entire ghost.
                                        call  read.descriptor                                         ; Read the ghost.

                                        call  close.descriptor                                        ; Close the socket file.

                                        cmp   dword [d.data + ghost.connection.descriptor.index], 0   ; Is there an active connection associated with this credential?
                                        jz    active.socket.poll.ghosts.inactive                      ; No. Don't do anything further with it.

                                        mov   eax, dword [d.data + ghost.connection.descriptor.index] ; eax - Descriptor associated with the poll target.
                                        mov   dword [socket.data.active.socket.descriptor], eax       ; Plug the descriptor into our polling packet.

                                        push  socket.data.active.socket.descriptor                    ; Point poll.descriptor to the poll target.
                                        call  poll.descriptor                                         ; Ask the socket whether or not it has incoming data for us to process.

                                        cmp   eax, sys.poll.in                                        ; Does the socket have incoming data?
                                        jnz   active.socket.poll.ghosts.inactive                      ; No. Don't do anything more with it.

                                        push  socket.data.active.socket.descriptor                    ; Yes. Point answer.active.socket to the active socket.
                                        call  answer.active.socket                                    ; Go process the data on the socket.

    active.socket.poll.ghosts.inactive: inc   edx                                                     ; edx - Next socket to poll.
                                        jmp   active.socket.poll.ghosts                               ; Go poll the next socket.

;------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

    active.socket.poll.done:            ret                                                           ; Return to caller.
