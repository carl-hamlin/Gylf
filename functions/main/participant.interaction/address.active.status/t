;------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
;
;   ./functions/main/participant.interaction/address.active.status/t
;
;   This function performs further processing on data submitted by a socket with status 'active'.
;
;   Assumptions:    ebp - Pointer to populated answer.active.socket.packet.
;
;   Returns:        None.
;
;------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
;
;   Symbolic Cross-Referencing
;
;   ./functions/aggregate.arguments/t                                 aggregate.arguments
;
;   ./functions/b                                                     buffer.1
;                                                                     dword.l
;
;   ./functions/d                                                     command.table
;                                                                     number.of.commands
;
;   ./functions/main/participant.interaction/address.active.status/t  address.active.status.found.command
;                                                                     address.active.status.next.command
;                                                                     address.active.status.next.command.jcxnz
;                                                                     address.active.status.read.command.table
;
;   ./functions/socket/answer.active.socket/s                         answer.active.socket.packet.rsize
;
;   ./functions/socket/recv.from.socket/t                             recv.from.socket
;
;   ./functions/write.bad.command.error/t                             write.bad.command.error
;

    address.active.status:                    pusha                                                       ; Preserve caller's registers.

                                              call  recv.from.socket                                      ; Get the data from the socket.
                                              call  aggregate.arguments                                   ; Aggregate arguments received.

                                              mov   ecx, number.of.commands                               ; ecx - Number of commands in command table. This number acts as our loop counter.

                                              mov   edi, buffer.1                                         ; edi - Pointer to received data.
                                              mov   ebx, command.table                                    ; ebx - Index to command table.

;------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

    address.active.status.read.command.table: push  ecx                                                   ; Preserve loop counter.
                                              sub   ecx, ecx                                              ; ecx - Prepared to be used as string length indicator.
                                              mov   esi, dword [ebx]                                      ; esi - Pointer to command length.
                                              mov   cl, byte [esi]                                        ; cl - length of command in table.
                                              inc   esi                                                   ; esi - Pointer to string data corresponding to command currently being referenced in
                                                                                                          ; the table.

                                              cmp   ecx, dword [ebp - answer.active.socket.packet.rsize]  ; Is the length of the received data at least the same as the command in the table?
                                              ja    address.active.status.next.command                    ; No. It's not necessary to perform any further comparison; the received data cannot
                                                                                                          ; possibly refer to the command currently being read from the table. Move on to the
                                                                                                          ; next table entry.

                                              repz  cmpsb                                                 ; Check to see if the received data is the same as the string data corresponding to the
                                                                                                          ; command currently being referenced in the table.
                                              jnz   address.active.status.next.command.jcxnz              ; Otherwise, go set up for the next iteration.
                                              jcxz  address.active.status.found.command                   ; Did we get all the way through the string before cmpsb cut us loose? If so, go set up
                                                                                                          ; the handler and call it.

;------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

    address.active.status.found.command:      pop   ecx                                                   ; Restore loop counter for stack preservation purposes.
                                              mov   ebx, dword [esi]                                      ; ebx - Pointer to handler for command.

                                              call  ebx                                                   ; Call handler for command.

                                              popa                                                        ; Restore caller's registers.
                                              ret                                                         ; Return to caller.

;------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

    address.active.status.next.command.jcxnz: mov   edi, buffer.1                                         ; edi - Pointer to received data.

;------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

    address.active.status.next.command:       add   ebx, dword.l                                          ; ebx - pointer to next table entry.
                                              pop   ecx                                                   ; Restore loop counter.
                                              loop  address.active.status.read.command.table              ; Go check the next command.

                                              call  write.bad.command.error                               ; Let the user know that they've entered a bad command and suggest that they try HELP.

                                              popa                                                        ; Restore caller's registers.
                                              ret                                                         ; Return to caller.
