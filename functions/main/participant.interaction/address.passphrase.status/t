;================================================================================================================================================================================================
;
;   ./functions/main/participant.interaction/address.passphrase.status/t
;
;   This code performs detailed processing of data received from sockets with the 'passphrase' status. Essentially, it assumes the received data is intended to represent a passphrase, and
;   compares the data to the stored passphrase for the user. If they match, then the user's status is set to 'active' and control is passed back to the caller. If they do not match, then the
;   user is informed of the situation and disconnected.
;
;   Assumptions:    esi = Pointer to socket table.
;
;   Returns:        None.
;
;------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
;
;   Symbolic Cross-Referencing
;
;   active.status                                       ./functions/main/b
;
;   bad.passphrase                                      ./functions/main/participant.interaction/address.passphrase.status/t
;
;   buffer.1                                            ./functions/b
;
;   buffer.2                                            ./functions/b
;
;   byte.l                                              ./b
;
;   clean.socket                                        ./functions/socket/clean.socket/t
;
;   close.descriptor                                    ./functions/close.descriptor/t
;
;   connection.filename.index                           ./functions/main/system.check/b
;
;   connection.status.index                             ./functions/main/system.check/b
;
;   good.passphrase                                     ./functions/main/participant.interaction/address.passphrase.status/t
;
;   open.descriptor                                     ./functions/open.descriptor/t
;
;   read.descriptor                                     ./functions/read.descriptor/t
;
;   recv.from.socket                                    ./functions/socket/recv.from.socket/t
;
;   socket.send                                         ./functions/socket/socket.send/t
;
;   text.data.index.socket.data.bad.passphrase.message  ./functions/main/text.init/b
;
;   write.welcome                                       ./functions/write.welcome/t
;

	  address.passphrase.status:  call  recv.from.socket                                            ; Grab the data from the socket.

                      					mov	  ebx, esi					                                          ; ebx - Pointer to connection tables.
					                      add	  ebx, connection.filename.index                              ; ebx - Pointer to file path associated with user credentials.
					                      push  ebx                                                         ; Point open.descriptor to user credential path.
                      					call	open.descriptor									                            ; Associate a descriptor with the user's credential file.

                      					push  byte.l									                                    ; Tell read.descriptor the number of bytes to read.
                      					push  buffer.2									                                  ; Point read.descriptor to buffer into which to read data from the user's credential file.
                      					push  eax									                                        ; Point read.descriptor to descriptor associated with user credential file.
                      					call	read.descriptor									                            ; Read the number of bytes to query.

                      					sub   edx, edx                                                    ; edx - Prepped for length of passphrase
                      					mov   dl, byte [buffer.2]                                         ; edx - Length of passphrase.
                      					push  edx                                                         ; Tell read.descriptor the length of the passphrase.
                      					push  buffer.2									                                  ; Point read.descriptor to read buffer.
                      					push  ebx                                                         ; Point read.descriptor to descriptor associated with the credential file.
                      					call	read.descriptor									                            ; Read the passphrase.

                      					push	eax										                                      ; Preserve number of bytes read.

                      					call	close.descriptor								                            ; Disassociate the descriptor.

                      					pop	  eax										                                      ; Restore number of bytes read.

                      					mov	  ebx, buffer.2									                              ; Pointer to read data.

                      					push	esi										                                      ; Preserve index to connection tables.

                      					mov	  ecx, eax									                                  ; ecx - Number of bytes read.
                      					mov	  esi, buffer.1									                              ; esi - Pointer to data received from socket.
                      					mov	  edi, buffer.2									                              ; edi - Pointer to data read from file.

;------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

	passphrase.cmp.loop:		      repz	cmpsb										                                    ; See if they match.
					                      jcxz	good.passphrase									                            ; If ecx iz zero, we got all the way through. Go send a welcome.

					                      jmp	  bad.passphrase									                            ; Otherwise, go tell the user he's SOL and smoke his connection.

;------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

	good.passphrase:		          pop	  esi										                                      ; Restore index to connection tables.

					                      mov	  byte [esi+connection.status.index], active.status           ; Set connection status to 'active'.
                      					call	write.welcome									                              ; Print the welcome screen.

					                      ret											                                          ; Return to caller.

;------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

	bad.passphrase:			          pop	  esi										                                      ; Restore index to connection tables.

                                push  dword [text.data.index.socket.data.bad.passphrase.message]  ; Point send function to message indicating that the passphrase was bad.
					                      call	socket.send									                                ; Tell the user that he's SOL.

					                      call	clean.socket									                              ; Smoke that connection!

					                      ret											                                          ; Return to caller.
