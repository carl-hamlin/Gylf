;------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
;
;   ./functions/main/participant.interaction/address.login.status/t
;
;   This code performs handling for data submitted by a socket with 'login' status. Essentially, it determines whether or not the connection belongs to a new participant or an old one, creates
;   participant credentials in the case of a new participant, and sets the connection status to 'passphrase'.
;
;   Assumptions:    ebp - Pointer to answer.active.socket.packet.
;
;   Returns:        None.
;
;------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
;
;   Symbolic Cross-Referencing
;
;   address.login.status.clean.waiting.list                 ./functions/main/participant.interaction/address.login.status/t
;
;   address.login.status.eggs                               ./functions/main/participant.interaction/address.login.status/t
;
;   address.login.status.eggs.new.login.done                ./functions/main/participant.interaction/address.login.status/t
;
;   address.login.status.eggs.returning.login               ./functions/main/participant.interaction/address.login.status/t
;
;   address.login.status.done                               ./functions/main/participant.interaction/address.login.status/t
;
;   address.login.status.ghosts                             ./functions/main/participant.interaction/address.login.status/t
;
;   address.login.status.gylf                               ./functions/main/participant.interaction/address.login.status/t
;
;   address.login.status.old.login                          ./functions/main/participant.interaction/address.login.status/t
;
;   buffer.1                                                ./functions/b
;
;   close.descriptor                                        ./functions/close.descriptor/t
;
;   convert.binary.id.to.ascii.id                           ./functions/convert.binary.id.to.ascii.id/t
;
;   d.data                                                  ./functions/b
;
;   e.data                                                  ./functions/b
;
;   egg.filename                                            ./functions/d
;
;   g.data                                                  ./functions/b
;
;   get.participant.data.by.name                            ./functions/get.participant.data.by.name/t
;
;   ghost.filename                                          ./functions/d
;
;   gylf.filename                                           ./functions/d
;
;   login.filename                                          ./functions/d
;
;   open.descriptor                                         ./functions/open.descriptor/t
;
;   passphrase.status                                       ./functions/main/b
;
;   recv.from.socket                                        ./functions/socket/recv.from.socket/t
;
;   set.passphrase.status                                   ./functions/main/b
;
;   socket.send                                             ./functions/socket/socket.send/t
;
;   sys.unlink                                              ./functions/b
;
;   sys.system.call                                         ./functions/b                                         
;
;   text.data.index.local.data.bad.login.error.message      ./functions/main/text.init/b
;
;   text.data.index.socket.data.bad.login.error.message     ./functions/main/text.init/b
;
;   text.data.index.socket.data.passphrase.message          ./functions/main/text.init/b
;
;   text.data.index.socket.data.second.login.error.message  ./functions/main/text.init/b
;
;   text.data.index.socket.data.second.login.message        ./functions/main/text.init/b
;
;   text.data.index.socket.data.welcome.message             ./functions/main/text.init/b
;
;   write.console                                           ./functions/write.console/t
;
;   write.descriptor                                        ./functions/write.descriptor/t
;

    address.login.status:                       call  recv.from.socket                                                    ; buffer.1 - Username received from the socket.

                                                mov   dword [ebp - answer.active.socket.packet.bpointer], e.data          ; Point get.participant.data.by.name to e.data.
                                                mov   dword [ebp - answer.active.socket.packet.fpointer], egg.filename    ; Point get.participant.data.by.name to egg filename.
                                                call  get.participant.data.by.name                                        ; Attempt to populate e.data with the data associated with the target
                                                                                                                          ; egg.

                                                or    eax, eax                                                            ; Were we able to associate data with the provided credential?
                                                jns   address.login.status.eggs                                           ; Yes. Go attach the socket number to the associated egg credential.

                                                mov   dword [ebp - answer.active.socket.packet.bpointer], g.data          ; Point get.participant.data.by.name to g.data.
                                                mov   dword [ebp - answer.active.socket.packet.fpointer], gylf.filename   ; Point get.participant.data.by.name to gylf filename.
                                                call  get.participant.data.by.name                                        ; Attempt to populate g.data with the data associated with the target
                                                                                                                          ; gylf.

                                                or    eax, eax                                                            ; Were we able to associate data with the provided credential?
                                                jns   address.login.status.gylf                                           ; Yes. Go attach the socket number to the associated gylf credential.

                                                mov   dword [ebp - answer.active.socket.packet.bpointer], d.data          ; Point get.participant.data.by.name to d.data.
                                                mov   dword [ebp - answer.active.socket.packet.fpointer], ghost.filename  ; Point get.participant.data.by.name to ghost filename.
                                                call  get.participant.data.by.name                                        ; Attempt to populate d.data with the data associated with the target
                                                                                                                          ; gylf.

                                                or    eax, eax                                                            ; Were we able to associate data with the provided credential?
                                                jns   address.login.status.ghosts                                         ; Yes. Go attach the socket number ot the associated ghost credential.

;------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

    address.login.status.bad.login:             mov   ebx, dword [ebp - answer.active.socket.packet.active]               ; ebx - Pointer to active socket.

                                                push  dword [ebx]                                                         ; Point send function to active socket.
                                                push  dword 00000000h                                                     ; No buffered data.
                                                push  dword 00000000h                                                     ; No buffered length.
                                                push  dword [text.data.index.socket.data.bad.login.error.message]         ; Point send function to message indicating that the login was bad.
                                                call  socket.send                                                         ; Tell the petitioner that their credentials aren't good here.

                                                push  dword [text.data.index.local.data.bad.login.error.message]          ; Pointer to error message indicating a connection failed on
                                                                                                                          ; credentials.
                                                call  write.console                                                       ; Tell the admin that somebody bounced.

                                                jmp   address.login.status.clean.waiting.list                             ; Go smoke the login and return to caller.

;------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

    address.login.status.old.login:             push  dword [text.data.index.socket.data.second.login.message]            ; Point send function to message indicating that the login was bad.
                                                call  socket.send                                                         ; Tell the petitioner that they're trying to log in a second time.

                                                push  dword [text.data.index.local.data.second.login.error.message]       ; Pointer to error message indicating a connection failed on
                                                                                                                          ; credentials.
                                                call  write.console                                                       ; Tell the admin that somebody bounced.

                                                jmp   address.login.status.clean.waiting.list                             ; Go return to caller.

;------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

    address.login.status.eggs:                  cmp   dword [e.data + egg.connection.descriptor.index], 0                 ; Is this credential already active?
                                                jnz   address.login.status.old.login                                      ; Yes. Go tell the user and the admin both that the provided credential
                                                                                                                          ; is active.

                                                mov   ebx, dword [ebp - answer.active.socket.packet.active]               ; ebx - Pointer to active socket.
                                                mov   eax, dword [ebx]                                                    ; eax - Socket being addressed.
                                                mov   dword [e.data + egg.connection.descriptor.index], eax               ; Populate the egg data with the associated active socket.

                                                cmp   byte [e.data + egg.passphrase], 0                                   ; Has the credential ever been used before?
                                                jnz   address.login.status.eggs.returning.login                           ; Yes. Go process a returning login for the egg.

    address.login.status.eggs.new.login:        push  dword [text.data.index.socket.data.welcome.message]                 ; Point send function to welcome message.
                                                call  socket.send                                                         ; Send the welcome message on the socket.

                                                mov   dword [e.data + egg.connection.status.index], set.passphrase.status ; Set status of target socket to 'setting passphrase'.

                                                jmp   address.login.status.eggs.new.login.done                            ; Go write the updated credential.

    address.login.status.eggs.returning.login:  push  eax                                                                 ; Point send function to active socket.
                                                push  dword 00000000h                                                     ; No buffered data.
                                                push  dword 00000000h                                                     ; No buffered length.
                                                push  dword [text.data.index.socket.data.passphrase.message]              ; Point send function to message indicating a request for a passphrase.
                                                call  socket.send                                                         ; Send the passphrase request on the socket.

                                                mov   byte [e.data + egg.connection.status.index], passphrase.status      ; Set status of target socket to 'passphrase'.

    address.login.status.eggs.new.login.done:   push  dword [ebp - answer.active.socket.packet.fpointer]                  ; Point open.descriptor to external credential.
                                                call  open.descriptor                                                     ; Associate a descriptor with the external credential.

                                                push  eax                                                                 ; Preserve descriptor for close.descriptor.

                                                push  eax                                                                 ; Point write.descriptor to the descriptor associated with the external
                                                                                                                          ; credential.
                                                push  e.data                                                              ; Point write.descriptor to the credential data stored at e.data.
                                                push  egg_size                                                            ; Tell write.descriptor to write an entire egg.credential.
                                                call  write.descriptor                                                    ; Write the updated egg credential.

                                                call  close.descriptor                                                    ; Disassociate the descriptor from the egg credential.

                                                jmp   address.login.status.clean.waiting.list                             ; Go remove the temporary socket descriptor from the waiting list.

;------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

    address.login.status.gylf:                  cmp   dword [g.data + gylf.connection.descriptor.index], 0                ; Is this credential already active?
                                                jnz   address.login.status.old.login                                      ; Yes. Go tell the user and the admin both that the provided credential
                                                                                                                          ; is active.

                                                mov   ebx, dword [ebp - answer.active.socket.packet.active]               ; ebx - Pointer to active socket.
                                                mov   eax, dword [ebx]                                                    ; eax - Socket being addressed.
                                                mov   dword [g.data + gylf.connection.descriptor.index], eax              ; Populate the gylf data with the associated active socket.
                                                mov   dword [g.data + gylf.connection.status.index], passphrase.status    ; Populate the gylf data with the updated connection status.

                                                push  eax                                                                 ; Point send function to active socket.
                                                push  dword 00000000h                                                     ; No buffered data.
                                                push  dword 00000000h                                                     ; No buffered length.
                                                push  dword [text.data.index.socket.data.passphrase.message]              ; Point send function to message indicating a request for a passphrase.
                                                call  socket.send                                                         ; Send the passphrase request on the socket.

                                                push  dword [ebp - answer.active.socket.packet.fpointer]                  ; Point open.descriptor to external credential.
                                                call  open.descriptor                                                     ; Associated a descriptor with the external credential.

                                                push  eax                                                                 ; Preserve descriptor for close.descriptor.

                                                push  eax                                                                 ; Point write.descriptor to the descriptor associated with the external
                                                                                                                          ; credential.
                                                push  g.data                                                              ; Point write.descriptor to the credential stored at g.data.
                                                push  gylf_size                                                           ; Tell write.descriptor to write an entire gylf credential.
                                                call  write.descriptor                                                    ; Write the updated gylf credential.

                                                call  close.descriptor                                                    ; Disassociate the descriptor from the gylf credential.

                                                jmp   address.login.status.clean.waiting.list                             ; Go remove the temporary socket descriptor from the waiting list.

;------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

    address.login.status.ghosts:                cmp   dword [d.data + ghost.connection.descriptor.index], 0               ; Is this credential already active?
                                                jnz   address.login.status.old.login                                      ; Yes. Go tell the user and the admin both that the provided credential
                                                                                                                          ; is active.

                                                mov   ebx, dword [ebp - answer.active.socket.packet.active]               ; ebx - Pointer to active socket.
                                                mov   eax, dword [ebx]                                                    ; eax - Socket being addressed.
                                                mov   dword [d.data + ghost.connection.descriptor.index], eax             ; Populate the ghost data with the associated active socket.
                                                mov   dword [d.data + ghost.connection.status.index], passphrase.status   ; Populate the ghost data with the updated connection status.

                                                push  eax                                                                 ; Point send function to active socket.
                                                push  dword 00000000h                                                     ; No buffered data.
                                                push  dword 00000000h                                                     ; No buffered length.
                                                push  dword [text.data.index.socket.data.passphrase.message]              ; Point send function to message indicating a request for a passphrase.
                                                call  socket.send                                                         ; Send the passphrase request on the socket.

                                                push  dword [ebp - answer.active.socket.packet.fpointer]                  ; Point open.descriptor to external credential.
                                                call  open.descriptor                                                     ; Associate a descriptor with the external credential.

                                                push  eax                                                                 ; Preserve descriptor for close.descriptor.

                                                push  eax                                                                 ; Point write.descriptor to the descriptor associated with the external
                                                                                                                          ; credential.
                                                push  d.data                                                              ; Point write.descriptor to the credential data stored at d.data.
                                                push  ghost_size                                                          ; Tell write.descriptor to write an entire ghost credential.
                                                call  write.descriptor                                                    ; Write the updated ghost credential.

                                                call  close.descriptor                                                    ; Disassociate the descriptor from the ghost credential.

;------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

    address.login.status.clean.waiting.list:    mov   eax, sys.unlink                                                     ; eax - Smoke the file.
                                                mov   ebx, login.filename                                                 ; ebx - Smoke the login file.
                                                int   sys.system.call                                                     ; SMOKE THAT MOTHERFUCKER!

;------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

    address.login.status.done:                  ret                                                                       ; Return to caller.
