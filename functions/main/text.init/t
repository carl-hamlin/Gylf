;================================================================================================================================================================================================
;
;   ./functions/main/text.init/t
;
;   This code sets up the ability to send messages to the admin and participants.
;
;   Assumptions:    None.
;
;   Returns:        None.
;
;------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
;
;   Symbolic Cross-Referencing
;
;   bail                                                  ./functions/bail/t
;
;   close.descriptor                                      ./functions/close.descriptor/t
;
;   dword.l                                               ./b
;
;   local.data.populating.textual.data.indices.message    ./functions/main/text.init/d
;
;   local.data.populating.textual.data.indices.message.l  ./functions/main/text.init/d
;
;   local.data.text.data.failed                           ./functions/main/text.init/d
;
;   local.data.text.data.failed.l                         ./functions/main/text.init/d
;
;   memory.switch                                         ./functions/memory.switch/t
;
;   open.descriptor                                       ./functions/open.descriptor/t
;
;   read.descriptor                                       ./functions/read.descriptor/t
;
;   sys.standard.output                                   ./b
;
;   text.data.filename                                    ./functions/main/text.init/d
;
;   text.data.index.num                                   ./functions/main/text.init/b
;
;   text.data.indices                                     ./functions/main/text.init/b
;
;   text.init.fail                                        ./functions/main/text.init/t
;
;   text.init.pop.loop                                    ./functions/main/text.init/t
;
;   write.descriptor                                      ./functions/write.descriptor/t
;

    text.init:          push  ebp                                                   ; Preserve caller's ebp.
                        push  00000000h                                             ; Setup storage for text data descriptor.
                        push  00000000h                                             ; Setup storage for read index.

                        mov   ebp, esp                                              ; ebp - Prepared to be used as data pointer.
                        add   ebp, (text.init.packet_size)                          ; ebp - Data pointer.

                        pusha                                                       ; Preserve caller's registers.

                        push  sys.standard.output                                   ; Write to console.
                        push  local.data.populating.textual.data.indices.message    ; Pointer to message indicating that we're about to populate the textual data indices.
                        push  local.data.populating.textual.data.indices.message.l  ; Length of message.
                        call  write.descriptor                                      ; Tell the admin that we're populating the textual data indices.

                        push  text.data.filename                                    ; Point open.descriptor to filename for external text data.
                        call  open.descriptor                                       ; Open the file for reading.

                        or    eax, eax                                              ; Did we get the descriptor?
                        js    text.init.fail                                        ; No. Go fail with error.

                        mov   dword [ebp - text.init.packet.descriptor], eax        ; Store descriptor associated with the external text data.

                        mov   ecx, text.data.index.num                              ; ecx - Counter for population of textual indices.
                        dec   ecx                                                   ; First index is always zero - no need to compute it.
                        sub   edx, edx                                              ; edx - Index counter.

                        mov   esi, text.data.indices                                ; esi - Pointer to indices.
                        mov   dword [esi], edx                                      ; Populate the first index.

                        add   esi, dword.l                                          ; esi - Pointer to storage for second index.

;------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

    text.init.pop.loop: push  dword.l                                               ; Request 4 bytes of extra memory.
                        call  memory.switch                                         ; Extend memory.

                        push  dword [ebp - text.init.packet.descriptor]             ; Point read.descriptor to descriptor associated with external data file.
                        push  ebx                                                   ; Point read.descriptor to extended memory buffer.
                        push  dword.l                                               ; Tell read.descriptor to read four bytes.
                        call  read.descriptor                                       ; Read the length of the message at this index.

                        mov   eax, dword [ebx]                                      ; eax - Current index.
                        mov   dword [ebp - text.init.packet.index], eax             ; Store current index.

                        add   edx, dword [ebx]                                      ; Add new bytes to last index.
                        add   edx, dword.l                                          ; Account for size storage in repository.
                        mov   dword [esi], edx                                      ; Store new index.

                        push  dword [ebx]                                           ; Request the number of bytes necessary to read to the next index.
                        call  memory.switch                                         ; Extend memory.

                        push  dword [ebp - text.init.packet.descriptor]             ; Point read.descriptor to descriptor associated with external data file.
                        push  ebx                                                   ; Point read.descriptor to extended memory buffer.
                        push  dword [ebp - text.init.packet.index]                  ; Tell read.descriptor the number of bytes to be read till next index.
                        call  read.descriptor                                       ; Read those bytes.

                        add   esi, dword.l                                          ; esi - Pointer to storage for next index.

                        loop  text.init.pop.loop                                    ; Populate the remainder of the indices.

                        push  dword [ebp - text.init.packet.descriptor]             ; Tell close.descriptor which descriptor to disassociate.
                        call  close.descriptor                                      ; Close the external data file.

                        push  0                                                     ; Tell memory.switch to free up memory.
                        call  memory.switch                                         ; Free memory.

                        popa                                                        ; Restore caller's registers.

                        pop   ebp                                                   ; Restore caller's ebp (1/3).
                        pop   ebp                                                   ; Restore caller's ebp (2/3).
                        pop   ebp                                                   ; Restore caller's ebp (3/3).

                        ret                                                         ; Return to caller.

;------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

    text.init.fail:     push  local.data.text.data.failed.l                         ; Length of message.
                        push  local.data.text.data.failed                           ; Message indicating that we've failed to initialize messaging and need to shut down.
                        push  sys.standard.output                                   ; Write to console.
                        call  write.descriptor                                      ; Let the admin know that we've failed to initialize messaging and need to shut down.

                        jmp   bail                                                  ; Go shut the server down.
