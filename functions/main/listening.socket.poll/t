;================================================================================================================================================================================================
;
;   ./functions/main/listening.socket.poll/t
;
;   This function polls the listening socket for new connection attempts and sends the login message when it finds them.
;
;   Assumptions:    None.
;
;   Returns:        None.
;
;------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
;
;   Symbolic Cross-Referencing
;
;   accept.socket                       ./functions/socket/accept.socket/t
;
;   clear.screen                        ./functions/clear.screen/t
;
;   close.descriptor                    ./functions/close.descriptor/t
;
;   connection.descriptor.index         ./functions/main/system.check/b
;
;   connection.entry.size               ./functions/main/system.check/b
;
;   connection.status.index             ./functions/main/system.check/b
;
;   connection.table                    ./functions/main/system.check/b
;
;   dead.socket                         ./functions/main/b
;
;   greet                               ./functions/main/listening.socket.poll/t
;
;   greet.add.socket                    ./functions/main/listening.socket.poll/t
;
;   greet.loop                          ./functions/main/listening.socket.poll/t
;
;   listening.socket.poll.done          ./functions/main/listening.socket.poll/t
;
;   local.data.connection.notifier      ./functions/main/listening.socket.poll/d
;
;   local.data.connection.notifier.l    ./functions/main/listening.socket.poll/d
;
;   login.status                        ./functions/main/b
;
;   no.connection.available             ./functions/main/listening.socket.poll/d
;
;   no.connection.available.l           ./functions/main/listening.socket.poll/d
;
;   poll.descriptor                     ./functions/poll.descriptor/t
;
;   socket.accept.error                 ./functions/socket/socket.errors/t
;
;   socket.data.event.socket.descriptor ./functions/main/active.socket.poll/d
;
;   socket.data.login.message;          ./functions/main/participant.interaction
;                                         /address.login.status/d
;
;   socket.data.login.message.l         ./functions/main/participant.interaction
;                                         /address.login.status/d
;
;   socket.data.send.buffer.l           ./functions/socket/recv.from.socket/d
;
;   socket.data.send.buffer.pointer     ./functions/socket/recv.from.socket/d
;
;   socket.data.send.socket.descriptor  ./functions/socket/recv.from.socket/d
;
;   socket.number                       ./b
;
;   socket.send                         ./functions/socket/socket.send/t
;
;   sys.poll.in                         ./functions/main/b
;
;   write.descriptor                    ./functions/write.descriptor/t
;

    listening.socket.poll:      push  socket.data.event.socket.descriptor                                 ; Point poll.descriptor to descriptor associated with listening socket.
                                call  poll.descriptor                                                     ; Poll the socket.

                                cmp   eax, sys.poll.in                                                    ; Is someone knocking?
                                jnz   listening.socket.poll.done                                          ; Nope. Go return to caller.

                                call  accept.socket                                                       ; Yes. Let's let them in!

                                or    eax, eax                                                            ; Did a descriptor successfully manage to become associated with the new socket?
                                jns   greet                                                               ; Yes! Go tell the new guy it's time to log in!

                                jmp   socket.accept.error                                                 ; Nope. Something is seriously wrong here. Go tell the admin we're screwed and bail
                                                                                                          ; out.

;------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

    listening.socket.poll.done: ret                                                                       ; Return to caller.

;------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

    greet:                      mov   esi, connection.table                                               ; esi = Index to connection tables.
                                mov   ecx, socket.number                                                  ; ecx = Number of entries.

    greet.loop                  cmp   dword [esi+connection.descriptor.index], dead.socket                ; Is the current entry occupied?
                                jz    greet.add.socket                                                    ; No! Let's occupy it!

                                add   esi, connection.entry.size                                          ; Yes. esi = pointer to the next entry.

                                loop  greet.loop                                                          ; Go check the next entry.

                                push  eax                                                                 ; Preserve descriptor associated with new connection. If we're here, the table is full
                                                                                                          ; up and there's no room for a new person. Bad news, bud.

                                mov   dword [socket.data.send.socket.descriptor], eax                     ; Store socket descriptor for sending.    
                                mov   dword [socket.data.send.buffer.pointer], no.connection.available    ; Point send function to message indicating that no connection is available.
                                mov   dword [socket.data.send.buffer.l], no.connection.available.l        ; Store length of message for send function
                                call  socket.send                                                         ; Tell the poor bastard we're all full up.

                                pop   ebx                                                                 ; ebx = descriptor associated with new connection.

                                call  close.descriptor                                                    ; Drop the new connection.

                                ret                                                                       ; Return to caller.

;------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

    greet.add.socket:           mov   dword [esi+connection.descriptor.index], eax                        ; Store descriptor as a new entry.
                                mov   byte [esi+connection.status.index], login.status                    ; Store status as a new entry.

                                mov   dword [socket.data.send.socket.descriptor], eax                     ; Point socket.send at the new socket.
                                call  clear.screen                                                        ; Clear that fellow's screen.

                                mov   dword [socket.data.send.buffer.pointer], socket.data.login.message  ; Point send function at message indicating a need for login credentials.
                                mov   dword [socket.data.send.buffer.l], socket.data.login.message.l      ; Store length of message for send function.
                                call  socket.send                                                         ; Tell the new guy that we'll need some login credentials.

                                mov   ecx, local.data.connection.notifier                                 ; ecx = Pointer to connection notification message.
                                mov   edx, local.data.connection.notifier.l                               ; edx = Length of message.
                                call  write.descriptor                                                    ; Tell the admin there's a new connection.

                                ret                                                                       ; Return to caller.
